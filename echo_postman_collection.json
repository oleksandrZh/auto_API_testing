{
	"info": {
		"_postman_id": "87ca39f5-d9a2-4cf6-af24-090f306c154a",
		"name": "TestsPlan_API_testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "postman-echo.com/get",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0f76a52-943d-45d5-b1a2-c65ccb935627",
						"exec": [
							"tests[\"Status code is not 201\"]=responseCode.code != 201;",
							"",
							"tests[\"Status code is 200\"]=responseCode.code == 200;",
							"",
							"",
							"pm.test(\"Status code not 404\", function(){",
							"    pm.response.to.not.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Status code not 500\", function(){",
							"    pm.response.to.not.have.status(500);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.include.header(\"Content-Type â†’application/json;\");",
							"});",
							"",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.headers.host).to.equal(\"postman-echo.com\");",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "postman-echo.com/get",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "postman-echo.com/post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "354d62b0-af5f-49a7-a38a-7e358716be78",
						"exec": [
							"pm.globals.unset(\"testData\");",
							"pm.environment.set(\"testData\", \"TestVariable\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e5b2a82a-a4e9-4323-b687-f72098d8a0b5",
						"exec": [
							"pm.test(\"Status code 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Status code not 500\", function(){",
							"    pm.response.to.not.have.status(500);",
							"});",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202,200]);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    var jsonData = pm.response.json();",
							"    var test = pm.environment.get(\"testData\");",
							"    pm.expect(jsonData.json.data).to.equal(test);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "data",
							"value": "{{testData}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "postman-echo.com/post",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://jsonplaceholder.typicode.com/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6f563982-48a8-48a1-9a02-deed66491835",
						"exec": [
							"pm.test(\"Status code 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[2].id).to.equal(3);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[2].title).to.include(\"ea molestias quasi\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://jsonplaceholder.typicode.com/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e0bf7ca9-6d26-4b25-8548-1c320087edb2",
						"exec": [
							"pm.test(\"Status code 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    var jsonData = pm.response.json();",
							"    var usersCount = jsonData.length;",
							"    pm.expect(usersCount).to.equal(10);",
							"});",
							"",
							"//json schema ",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"properties\":{",
							"    \"id\": {\"type\" : \"number\"},",
							"    \"name\": {\"type\" : \"string\"},",
							"    \"email\": {\"type\": \"string\"}",
							"    }",
							"};",
							"",
							"pm.test(\"JSON schema is valid\", function(){",
							"   var jsonData = pm.response.json();",
							"   var user = jsonData[0];",
							"   pm.expect(tv4.validate(user,schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://jsonplaceholder.typicode.com/users?id=2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "71ccc4bc-b16f-40d2-8696-816cdaa15c79",
						"exec": [
							"pm.environment.set(\"variable_key\", \"variable_value\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fdcee4f2-766b-458f-949c-d9d09e58e8e4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users?id=2",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	]
}